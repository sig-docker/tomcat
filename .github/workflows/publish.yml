name: Publish to Docker Hub

on:
  push:
  schedule:
    - cron: '23 12 * * *'
  workflow_dispatch:

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Compute which base tags to build
        id: set-matrix
        run: echo "::set-output name=matrix::$(bash build/get_base_tags.sh)"
    
  build:
    needs: prep
    if: ${{ matrix.baseTag != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        baseTag: ${{ fromJson(needs.prep.outputs.matrix) }}
        exclude:
          - baseTag: 10.1.0-jdk11-openjdk   # Critical vulnerability
    steps:
      - name: Install docker scan plugin
        run: |
          mkdir -p ~/.docker/cli-plugins && \
          curl https://github.com/docker/scan-cli-plugin/releases/latest/download/docker-scan_linux_amd64 -L -s -S -o ~/.docker/cli-plugins/docker-scan && \
          chmod +x ~/.docker/cli-plugins/docker-scan

      - name: Install pip packages
        run: pip3 install pydantic

      - name: Check out code
        uses: actions/checkout@v2
        
      - name: Get short commit hash
        id: shortSha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        
      - name: Get Tomcat major version
        id: tcMajorVer
        run: echo "::set-output name=major_ver::$(echo '${{ matrix.baseTag }}' |cut -d '.' -f 1)"

      - name: Get Tomcat JDK version
        id: tcJdkVer
        run: echo "::set-output name=jdk_ver::$(echo '${{ matrix.baseTag }}' |cut -d - -f 2)"

      - name: Dump debug info
        run: |
          echo "baseTag: '${{ matrix.baseTag }}'" && \
          echo "sha_short: '${{ steps.shortSha.outputs.sha_short }}'" && \
          echo "matrix: '${{ needs.prep.outputs.matrix }}'"

      - name: Update Dockerfile
        run: sed -ie 's/^FROM .*/FROM tomcat:${{ matrix.baseTag }}/g' Dockerfile
        
      - name: Check Dockerfile
        run: grep FROM Dockerfile
      
      - name: Docker Hub Login
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: sigcorp/tomcat:${{ matrix.baseTag }}-${{ steps.shortSha.outputs.sha_short }}

      - name: Test startup configuration
        run: |
          docker run --rm \
            -e TOMCAT_MEMORY_ARGS='-Xms1024m -Xmx2048m' \
            -e TCDS_BP_JDBC_URL='jdbc:oracle:thin:@db.school.edu:1521:PROD' \
            -e TCDS_BP_USER='banproxy' \
            -e TCDS_BP_JNDI_NAME='jdbc/bannerDataSource' \
            -e TCDS_BP_PASSWORD='super_secret' \
            -e CENSOR_ANSIBLE_OUTPUT='no' \
            -e ENABLE_SSL='yes' \
            -e TEST_CONF_ONLY='y'  \
            sigcorp/tomcat:${{ matrix.baseTag }}-${{ steps.shortSha.outputs.sha_short }}

      - name: Log into docker scan
        run: docker scan --login --accept-license --token ${{ secrets.DOCKER_SCAN_TOKEN }}

      - name: Scan for vulnerabilities
        run: docker scan --json sigcorp/tomcat:${{ matrix.baseTag }}-${{ steps.shortSha.outputs.sha_short }} |tee v.json

      - name: Check vulnerability scan results
        run: python3 build/check_scan_results.py scan_config.yml v.json

      # - name: Scan for vulnerabilities
      #   uses: azure/container-scan@v0
      #   with:
      #     image-name: sigcorp/tomcat:${{ matrix.baseTag }}-${{ steps.shortSha.outputs.sha_short }}

      - name: Configure AWS credentials
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SIG_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SIG_AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        if: ${{ github.ref == 'refs/heads/master' }}
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/i5k1f9l3

      - name: Push to Docker AWS ECR
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            public.ecr.aws/i5k1f9l3/sig-tomcat:${{ matrix.baseTag }}
            public.ecr.aws/i5k1f9l3/sig-tomcat:${{ matrix.baseTag }}-${{ steps.shortSha.outputs.sha_short }}
            public.ecr.aws/i5k1f9l3/sig-tomcat:${{ matrix.baseTag }}-${{ github.run_number }}
            public.ecr.aws/i5k1f9l3/sig-tomcat:latest-${{ steps.tcMajorVer.outputs.major_ver }}-${{ steps.tcJdkVer.outputs.jdk_ver }}

      - name: Push to Docker Hub
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            sigcorp/tomcat:${{ matrix.baseTag }}
            sigcorp/tomcat:${{ matrix.baseTag }}-${{ steps.shortSha.outputs.sha_short }}
            sigcorp/tomcat:${{ matrix.baseTag }}-${{ github.run_number }}
            sigcorp/tomcat:latest-${{ steps.tcMajorVer.outputs.major_ver }}-${{ steps.tcJdkVer.outputs.jdk_ver }}

